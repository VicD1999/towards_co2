#TIMEHORIZON
// time horizon definition
T = 8760;

#NODE PIPE_CO2_ON_SHORE_SMALL // 0.01-0.03 kt/h
    // DATA from ENS.DK
	#PARAMETERS
        length = 3000;                           // length of the pipe in km
        capex = 15 * length;                // M€/kt/h
        fom = 20 * 1/(10**3) * length;                // M€/kt/h
        vom = 0;                                // M€/kt
        lifetime = 50.0;                        // years
        electricity_required_for_CO2 = 0.06;   //MW/kt/h
        efficiency_pipe = 1.0;
        yearly_capex = capex * global.wacc / (1 - (1 + global.wacc)**(-lifetime));
    #VARIABLES
        external: flow_in[T]; // kt/h
        external: flow_out[T]; // kt/h
        external: e_consumed[T]; // MWH(e)
        internal: capacity; // kt/h
    #CONSTRAINTS
        flow_out[t] == efficiency_pipe * flow_in[t];
        capacity >= 0;
        flow_in[t] >= 0;
        flow_in[t] <= capacity;
        e_consumed[t] == electricity_required_for_CO2 * flow_in[t];

    #OBJECTIVES
        min pipe_cost_fix: (yearly_capex + fom) * capacity * global.number_years_horizon;
        min pipe_cost_var: vom * flow_in[t];


#NODE PIPE_CO2_ON_SHORE_BIG // 0.030-0.12 kt/h
     // DATA from ENS.DK
    #PARAMETERS
        length = 3000;                           // length of the pipe in km
        capex = 8 * length;                // M€/kt/h
        fom = 20 * 1/(10**3) * length;                // M€/kt/h
        vom = 0;                                // M€/kt
        lifetime = 50.0;                        // years
        electricity_required_for_CO2 = 0.04;   //MW/kt/h
        efficiency_pipe = 1.0;
        yearly_capex = capex * global.wacc / (1 - (1 + global.wacc)**(-lifetime));
    #VARIABLES
        external: flow_in[T]; // kt/h
        external: flow_out[T]; // kt/h
        external: e_consumed[T]; // MWH(e)
        internal: capacity; // kt/h
    #CONSTRAINTS
        flow_out[t] == efficiency_pipe * flow_in[t];
        capacity >= 0;
        flow_in[t] >= 0;
        flow_in[t] <= capacity;
        e_consumed[t] == electricity_required_for_CO2 * flow_in[t];
        
    #OBJECTIVES
        min pipe_cost_fix: (yearly_capex + fom) * capacity * global.number_years_horizon;
        min pipe_cost_var: vom * flow_in[t];

#NODE PIPE_CO2_ON_SHORE_VERY_BIG // 0.12-0.5 kt/h
     // DATA from ENS.DK
    #PARAMETERS
        length = 3000;                           // length of the pipe in km
        capex = 2.3 * length;                // M€/kt/h
        fom = 20 * 1/(10**3) * length;                // M€/kt/h
        vom = 0;                                // M€/kt
        lifetime = 50.0;                        // years
        electricity_required_for_CO2 = 0.02;   //MW/kt/h
        efficiency_pipe = 1.0;
        yearly_capex = capex * global.wacc / (1 - (1 + global.wacc)**(-lifetime));
    #VARIABLES
        external: flow_in[T]; // kt/h
        external: flow_out[T]; // kt/h
        external: e_consumed[T]; // MWH(e)
        internal: capacity; // kt/h
    #CONSTRAINTS
        flow_out[t] == efficiency_pipe * flow_in[t];
        capacity >= 0;
        flow_in[t] >= 0;
        flow_in[t] <= capacity;
        e_consumed[t] == electricity_required_for_CO2 * flow_in[t];
        
    #OBJECTIVES
        min pipe_cost_fix: (yearly_capex + fom) * capacity * global.number_years_horizon;
        min pipe_cost_var: vom * flow_in[t];

#NODE PIPE_CO2_OFF_SHORE // 0.12-0.5 kt/h
     // DATA from ENS.DK
    #PARAMETERS
        length = 3000;                           // length of the pipe in km
        capex = 4 * length;                // M€/kt/h
        fom = 20 * 1/(10**3) * length;                // M€/kt/h
        vom = 0;                                // M€/kt
        lifetime = 50.0;                        // years
        electricity_required_for_CO2 = 0.02;   //MW/kt/h
        efficiency_pipe = 1.0;
        yearly_capex = capex * global.wacc / (1 - (1 + global.wacc)**(-lifetime));
    #VARIABLES
        external: flow_in[T]; // kt/h
        external: flow_out[T]; // kt/h
        external: e_consumed[T]; // MWH(e)
        internal: capacity; // kt/h
    #CONSTRAINTS
        flow_out[t] == efficiency_pipe * flow_in[t];
        capacity >= 0;
        flow_in[t] >= 0;
        flow_in[t] <= capacity;
        e_consumed[t] == electricity_required_for_CO2 * flow_in[t];
        
    #OBJECTIVES
        min pipe_cost_fix: (yearly_capex + fom) * capacity * global.number_years_horizon;
        min pipe_cost_var: vom * flow_in[t];

#NODE LIQUEFIED_CO2_CARRIERS // Data ENS.DK 10 kt CO2 capacity
   #PARAMETERS
       number_carriers = 7;
       full_capex = 5; // M€/kt
       lifetime = 40.0;
       annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
       fom = 0.0; // MEur/year
       vom = 0.0;
       schedule = import "data/carrier_schedule.csv";
       loading_time = 24;
       travel_time = 116;
       conversion_factor = 1.0;
       conversion_factor_methane = 15.42; // GWh/kt
       energy_consumption = 0.0150/(24*10); // GWh/h/kt CO2
   #VARIABLES
       internal: capacity; // kt
       external: liquefied_co2_in[T];
       external: liquefied_co2_out[T];
       external: liquefied_methane_in[T]; // GWh/h
       
   #CONSTRAINTS
       liquefied_co2_in[t] <= schedule[t] * capacity / loading_time;
       liquefied_co2_in[t] == liquefied_co2_out[t+travel_time]*conversion_factor;
       liquefied_co2_out[t] == 0 where t < travel_time;
       // Below: availability_at_RREH * GWH/h/kt CO2 * days of travelling * Go there and back * reference capacity ens.dk * capacity * 1/hours of loading; 
       liquefied_methane_in[t+travel_time] * conversion_factor_methane == schedule[t] * energy_consumption * travel_time * 2 * capacity / loading_time ;  // GWh/h
       liquefied_methane_in[t] >= 0;
       // liquefied_methane_in[t] == 0 where t < travel_time;
       capacity >= 0;
       liquefied_co2_in[t] >= 0;
       liquefied_co2_out[t] >= 0;
   #OBJECTIVES
       min: global.number_years_horizon * (annualised_capex + fom) * capacity * number_carriers;
       min: vom * liquefied_co2_in[t];

#NODE LIQUEFIED_CO2_REGASIFICATION
   #PARAMETERS
       full_capex = 25.1;  
       lifetime = 30.0;
       annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
       fom = 1.25; //  MEur/year 
       vom = 0.0;
       conversion_factor = 0.98;
   #VARIABLES
       internal: capacity;
       external: liquefied_co2_in[T];
       external: co2_out[T];
   #CONSTRAINTS
        liquefied_co2_in[t] <= capacity;
        co2_out[t] == conversion_factor * liquefied_co2_in[t];
        capacity >= 0;
        co2_out[t] >= 0;
        liquefied_co2_in[t] >= 0;
   #OBJECTIVES
    min: global.number_years_horizon * (annualised_capex + fom) * capacity;
    min: vom * liquefied_co2_in[t];

#NODE CO2_LIQUEFACTION_PLANTS  // 28°C and 15 bara.
    #PARAMETERS
        full_capex = 55.8;  //  M euro / kt / h
        lifetime = 30.0;
        annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
        fom = 2.79;  // MEur/year 
        vom = 0.0;
        conversion_factor_electricity = 0.014; // GWh / kt(co2) Data ENS.DK 0.16
        conversion_factor_co2 = 0.99; // Data ENS.DK
        minimum_level = 1.0;
        ramp_rate_up = 0.0;
        ramp_rate_down = 0.0;
    #VARIABLES
        internal: capacity;
        external: elec_in[T];
        external: co2_in[T];
        external: liquefied_co2_out[T];
    #CONSTRAINTS
        liquefied_co2_out[t] <= capacity;
        elec_in[t] == conversion_factor_electricity * liquefied_co2_out[t];
        co2_in[t] == conversion_factor_co2 * liquefied_co2_out[t];

        capacity >= 0;
        elec_in[t] >= 0;
        liquefied_co2_out[t] >= 0;
        co2_in[t] >= 0;
    #OBJECTIVES
        min: global.number_years_horizon * (annualised_capex + fom) * capacity;
        min: vom * liquefied_co2_out[t];

#NODE LIQUEFIED_CO2_STORAGE  // data Berger et al, Tableau Data ENS.DK ??
    #PARAMETERS
        full_capex_stock = 2.3; //M euro / kt
        lifetime_stock = 30.0;
        annualised_capex_stock = full_capex_stock * global.wacc * (1 + global.wacc)**lifetime_stock / ((1 + global.wacc)**lifetime_stock - 1); // MEur
        fom_stock = 0.0675;
        vom_stock = 0.0;
    #VARIABLES
        internal: capacity_stock;
        internal: liquefied_co2_stored[T];
        external: liquefied_co2_in[T];
        external: liquefied_co2_out[T];
    #CONSTRAINTS
        liquefied_co2_stored[t] <= capacity_stock;
        liquefied_co2_stored[0] == liquefied_co2_stored[T-1];
        liquefied_co2_stored[t+1] == liquefied_co2_stored[t] + liquefied_co2_in[t] - liquefied_co2_out[t];
        capacity_stock >= 0;
        liquefied_co2_stored[t] >= 0;
        liquefied_co2_in[t] >= 0;
        liquefied_co2_out[t] >= 0;
    #OBJECTIVES
        min: global.number_years_horizon * (annualised_capex_stock + fom_stock) * capacity_stock;
        min: vom_stock * liquefied_co2_stored[t];


